{
	"name": "p_DPDB-CDI-DPDB_ADVISER_NETWORK_STG",
	"properties": {
		"description": "Name : Nextpathway\nDate : 01/06/2023\nDescription : pulls data from oracle tables and loads into transient table. Compares transient table with staging table to identify new/updated records in the target/staging table and load target table.",
		"activities": [
			{
				"name": "sp-TRUNCATE-TD_DPDB_ADVISER_NETWORK_STG",
				"description": "This step truncates the transient table, TD_DPDB_ADVISER_NETWORK_STG.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[STAGE_LOAD].[PRC_TRUNCATE_TD_TABLE]",
					"storedProcedureParameters": {
						"p_table_name": {
							"value": {
								"value": "TD_DPDB_ADVISER_NETWORK_STG",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_AzureSQLDB",
					"type": "LinkedServiceReference",
					"parameters": {
						"ENVIRONMENT": {
							"value": "@pipeline().globalParameters.ENVIRONMENT",
							"type": "Expression"
						},
						"SHORT_LOCATION": {
							"value": "@pipeline().globalParameters.SHORT_LOCATION",
							"type": "Expression"
						},
						"LOGICAL_ENVIRONMENT": {
							"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "cd-TD_DPDB_ADVISER_NETWORK_STG",
				"description": "pulls data from oracle tables, loads into transient table.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "sp-TRUNCATE-TD_DPDB_ADVISER_NETWORK_STG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "OracleSource",
						"oracleReaderQuery": "with ADVISER_NETWORK\nas    \n(select P.ORGANISATION_NAME,\n        PR.PARTY_ROLE_ID,\n        PR.PARTY_ROLE_TYPE_ID,\n        OPR.STATUS,\n        OPR.FIRM_REFERENCE_NUMBER,\n        OPR.REGULATORY_STATUS_ID,\n        OPR.REGULATION_TYPE_ID\n   from PARTY P\n  inner join PARTY_ROLE PR\n     on (PR.PARTY_ID = P.PARTY_ID)\n  inner join ORGANISATION_PARTY_ROLE OPR\n     on (OPR.PARTY_ROLE_ID = PR.PARTY_ROLE_ID)\n  where PR.PARTY_ROLE_ID in\n          (select PARTY_ROLE_ID\n             from party_role_relationship\n            where RELATIONSHIP_TYPE_ID = 'rel_netmem'\n              and end_date is null\n          )\n),\nHEAD_OFFICE\nas\n(select PRR.PARTY_ROLE_ID,\n        PRR.RELATED_PARTY_ROLE_ID as HEAD_OFFICE_PARTY_ROLE_ID\n   from PARTY_ROLE_RELATIONSHIP PRR\n  inner join PARTY_ROLE PR\n     on (PRR.RELATED_PARTY_ROLE_ID = PR.PARTY_ROLE_ID)\n  where PRR.RELATIONSHIP_TYPE_ID = 'rel_afoff'\n    and PRR.END_DATE is null\n    and PR.PARTY_ROLE_TYPE_ID = 'head_off'\n),\nHO_ADDRESS\nas\n(select ADDRESS.PARTY_ROLE_ID,\n        ADDRESS.UPDATED_DATE,\n        ADDRESS.ADDRESS_LINE_1,\n        ADDRESS.ADDRESS_LINE_2,\n        ADDRESS.ADDRESS_LINE_3,\n        ADDRESS.ADDRESS_LINE_4,\n        ADDRESS.POSTCODE\n   from (select CPR.PARTY_ROLE_ID as PARTY_ROLE_ID,\n                CPR.UPDATED_DATE  as UPDATED_DATE,\n                trim(PA.ADDRESS_LINE_1) as ADDRESS_LINE_1,\n                trim(PA.ADDRESS_LINE_2) as ADDRESS_LINE_2,\n                trim(PA.ADDRESS_LINE_3) as ADDRESS_LINE_3,\n                trim(PA.ADDRESS_LINE_4) as ADDRESS_LINE_4,\n                trim(PA.POSTCODE) as POSTCODE,\n                row_number() over (partition by CPR.PARTY_ROLE_ID\n                                       order by CPR.UPDATED_DATE desc) RN\n           from PARTY_ROLE PR\n          inner join  CONTACT_POINT_ROLE CPR\n             on (PR.PARTY_ROLE_ID = CPR.PARTY_ROLE_ID)\n          inner join CONTACT_POINT CP\n             on (CPR.CONTACT_POINT_ID=CP.CONTACT_POINT_ID)\n          inner join POSTAL_ADDRESS PA\n             on (CP.CONTACT_POINT_ID=PA.CONTACT_POINT_ID)\n          where CPR.END_DATE is null\n            and CP.contact_point_type_id in('cp_addr')\n            and nvl(CPR.CONTACT_POINT_ROLE_TYPE_ID,'A') != 'cpr_rig'\n            and PR.party_role_type_id in ( 'head_off' )\n        ) ADDRESS\n  where ADDRESS.RN = 1\n),\nHO_EMAIL\nas\n(select EMAIL.PARTY_ROLE_ID,\n        EMAIL.EMAIL_URL_ADDRESS\n   from (select CPR.PARTY_ROLE_ID as PARTY_ROLE_ID,\n                trim(EUA.EMAIL_URL_ADDRESS) as EMAIL_URL_ADDRESS,\n                row_number() over (partition by CPR.PARTY_ROLE_ID\n                                       order by CPR.UPDATED_DATE desc) RN\n           from CONTACT_POINT_ROLE CPR\n          inner join CONTACT_POINT CP\n             on (CPR.CONTACT_POINT_ID=CP.CONTACT_POINT_ID)\n          inner join EMAIL_URL_ADDRESS EUA\n             on (CP.CONTACT_POINT_ID=EUA.CONTACT_POINT_ID)\n          inner join PARTY_ROLE PR\n             on (PR.PARTY_ROLE_ID = CPR.PARTY_ROLE_ID)\n          where CPR.END_DATE is null\n            and CP.contact_point_type_id = 'cp_email'\n            and PR.party_role_type_id = 'head_off'\n        ) EMAIL\n  where EMAIL.RN = 1\n),\nHO_PHONE\nas\n(select PHONE.PARTY_ROLE_ID,\n        PHONE.PHONE_FAX_NUMBER\n   from (select CPR.PARTY_ROLE_ID as PARTY_ROLE_ID,\n                PFN.PHONE_FAX_NUMBER as PHONE_FAX_NUMBER,\n                row_number() over (partition by CPR.PARTY_ROLE_ID\n                                       order by CPR.UPDATED_DATE desc) RN\n           from CONTACT_POINT_ROLE CPR\n          inner join CONTACT_POINT CP\n             on (CPR.CONTACT_POINT_ID=CP.CONTACT_POINT_ID)\n          inner join PHONE_FAX_NUMBER PFN\n             on (CP.CONTACT_POINT_ID=PFN.CONTACT_POINT_ID)\n          inner join PARTY_ROLE PR\n             on (PR.PARTY_ROLE_ID = CPR.PARTY_ROLE_ID)\n          where CPR.END_DATE is null\n            and CP.contact_point_type_id in('cp_phone')\n            and PR.party_role_type_id in ( 'head_off' )\n        ) PHONE\n  where PHONE.RN = 1\n),\nPARTY_ROLE_NETWORK\nas\n(select nvl(STAGE2.PARTY_ROLE_ID, PRR.PARTY_ROLE_ID) as PARTY_ROLE_ID,\n       PRR.RELATED_PARTY_ROLE_ID\n  from PARTY_ROLE_RELATIONSHIP PRR\n  left outer join (select PARTY_ROLE_ID,\n                          RELATED_PARTY_ROLE_ID\n                     from PARTY_ROLE_RELATIONSHIP\n                    where RELATIONSHIP_TYPE_ID = 'rel_netmem'\n                      and END_DATE IS NULL\n                      and DEFAULT_REPORT_RELATIONSHIP = 'Y'\n                      and RELATED_PARTY_ROLE_ID in\n                           (select PARTY_ROLE_ID\n                                   from ORGANISATION_PARTY_ROLE\n                                   where REGULATION_TYPE_ID = 'rt_apprep'\n                                     and status = 'A'\n                           )\n                  ) STAGE2\n    on (STAGE2.RELATED_PARTY_ROLE_ID = PRR.PARTY_ROLE_ID)\n  where PRR.RELATIONSHIP_TYPE_ID = 'rel_netmem'\n    and PRR.END_DATE IS NULL\n    and PRR.DEFAULT_REPORT_RELATIONSHIP = 'Y'\n    and PRR.RELATED_PARTY_ROLE_ID in\n          (select PARTY_ROLE_ID\n             from ORGANISATION_PARTY_ROLE\n            where REGULATION_TYPE_ID = 'rt_apprep'\n              and status = 'A'\n          )\n),\nAUTHORISATION\nas\n(select PARTY_ROLE_ID,\n        PROD_GRP_ID,\n        END_DATE\n   from PRODUCT_AUTHORISATION\n  where END_DATE is null \n    and PROD_GRP_ID in (10004,10003,10002)\n),\nROLE_PERMISSION\nas\n(select PARTY_ROLE_ID,\n        PERMISSION_TYPE_ID,\n        END_DATE\n   from PARTY_ROLE_PERMISSIONS\n  where END_DATE is null \n    and PERMISSION_TYPE_ID='prp_penstrans'\n )\nselect PRR.PARTY_ROLE_ID as NETWORK_PARTY_ROLE_ID,\n       PRR.RELATED_PARTY_ROLE_ID as REL_FIRM_PARTY_ROLE_ID,\n       AN.ORGANISATION_NAME,\n       AN.FIRM_REFERENCE_NUMBER,\n       AN.STATUS,\n       PRR.RELATIONSHIP_TYPE_ID,\n       AN.REGULATORY_STATUS_ID,\n       AN.PARTY_ROLE_TYPE_ID,\n       nvl2(AIA.PROD_GRP_ID, 1, 0) as PERM_INVESTMENT_ADVICE,\n       nvl2(AMA.PROD_GRP_ID, 1, 0) as PERM_MORTGAGE_ADVICE,\n       nvl2(APA.PROD_GRP_ID, 1, 0) as PERM_INSURANCE_ADVICE,\n       nvl2(RP.PERMISSION_TYPE_ID, 1, 0) as PERM_PENSION_ADVICE,\n       HA.ADDRESS_LINE_1,\n       HA.ADDRESS_LINE_2,\n       HA.ADDRESS_LINE_3,\n       HA.ADDRESS_LINE_4,\n       HA.POSTCODE,\n       HE.EMAIL_URL_ADDRESS,\n       HP.PHONE_FAX_NUMBER\n  from ADVISER_NETWORK AN\n inner join PARTY_ROLE_RELATIONSHIP PRR\n    on (PRR.PARTY_ROLE_ID = AN.PARTY_ROLE_ID)\n  left outer join HEAD_OFFICE HO\n    on (AN.PARTY_ROLE_ID = HO.PARTY_ROLE_ID)\n  left outer join HO_ADDRESS HA\n    on (HA.PARTY_ROLE_ID = HO.HEAD_OFFICE_PARTY_ROLE_ID)\n  left outer join PARTY_ROLE_NETWORK PRN\n    on (PRN.RELATED_PARTY_ROLE_ID = AN.PARTY_ROLE_ID)\n  left outer join AUTHORISATION AIA\n    on (    AIA.PROD_GRP_ID = 10004\n        and AIA.PARTY_ROLE_ID = case\n                                  when     AN.REGULATION_TYPE_ID = 'rt_apprep'\n                                       and PRN.PARTY_ROLE_ID is not null then\n                                    PRN.PARTY_ROLE_ID\n                                else\n                                  AN.PARTY_ROLE_ID\n                                end)\n  left outer join AUTHORISATION AMA\n    on (    AMA.PROD_GRP_ID = 10003\n        and AMA.PARTY_ROLE_ID = case\n                                  when     AN.REGULATION_TYPE_ID = 'rt_apprep'\n                                       and PRN.PARTY_ROLE_ID is not null then\n                                    PRN.PARTY_ROLE_ID\n                                else\n                                  AN.PARTY_ROLE_ID\n                                end)\n  left outer join AUTHORISATION APA\n    on (    APA.PROD_GRP_ID = 10002\n        and APA.PARTY_ROLE_ID = case\n                                  when     AN.REGULATION_TYPE_ID = 'rt_apprep'\n                                       and PRN.PARTY_ROLE_ID is not null then\n                                    PRN.PARTY_ROLE_ID\n                                else\n                                  AN.PARTY_ROLE_ID\n                                end)\n  left outer join ROLE_PERMISSION RP\n    on (RP.PARTY_ROLE_ID = case\n                             when     AN.REGULATION_TYPE_ID = 'rt_apprep'\n                                  and PRN.PARTY_ROLE_ID is not null then\n                               PRN.PARTY_ROLE_ID\n                           else\n                             AN.PARTY_ROLE_ID\n                           end)\n  left outer join HO_PHONE HP\n    on (HP.PARTY_ROLE_ID = HO.HEAD_OFFICE_PARTY_ROLE_ID)\n  left outer join HO_EMAIL HE\n    on (HE.PARTY_ROLE_ID = HO.HEAD_OFFICE_PARTY_ROLE_ID)\n where PRR.RELATIONSHIP_TYPE_ID = 'rel_netmem'\n   and PRR.END_DATE is null",
						"partitionOption": "None",
						"queryTimeout": "02:00:00"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String"
								},
								"sink": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String"
								},
								"sink": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ORGANISATION_NAME",
									"type": "String"
								},
								"sink": {
									"name": "ORGANISATION_NAME",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "FIRM_REFERENCE_NUMBER",
									"type": "String"
								},
								"sink": {
									"name": "FIRM_REFERENCE_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "STATUS",
									"type": "String"
								},
								"sink": {
									"name": "STATUS",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "RELATIONSHIP_TYPE_ID",
									"type": "String"
								},
								"sink": {
									"name": "RELATIONSHIP_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "REGULATORY_STATUS_ID",
									"type": "String"
								},
								"sink": {
									"name": "REGULATORY_STATUS_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PARTY_ROLE_TYPE_ID",
									"type": "String"
								},
								"sink": {
									"name": "PARTY_ROLE_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PERM_INVESTMENT_ADVICE",
									"type": "Double"
								},
								"sink": {
									"name": "PERM_INVESTMENT_ADVICE",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 1
								}
							},
							{
								"source": {
									"name": "PERM_MORTGAGE_ADVICE",
									"type": "Double"
								},
								"sink": {
									"name": "PERM_MORTGAGE_ADVICE",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 1
								}
							},
							{
								"source": {
									"name": "PERM_INSURANCE_ADVICE",
									"type": "Double"
								},
								"sink": {
									"name": "PERM_INSURANCE_ADVICE",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 1
								}
							},
							{
								"source": {
									"name": "PERM_PENSION_ADVICE",
									"type": "Double"
								},
								"sink": {
									"name": "PERM_PENSION_ADVICE",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 0,
									"precision": 1
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_1",
									"type": "String"
								},
								"sink": {
									"name": "ADDRESS_LINE_1",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_2",
									"type": "String"
								},
								"sink": {
									"name": "ADDRESS_LINE_2",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_3",
									"type": "String"
								},
								"sink": {
									"name": "ADDRESS_LINE_3",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_4",
									"type": "String"
								},
								"sink": {
									"name": "ADDRESS_LINE_4",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "POSTCODE",
									"type": "String"
								},
								"sink": {
									"name": "POSTCODE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "EMAIL_URL_ADDRESS",
									"type": "String"
								},
								"sink": {
									"name": "EMAIL_URL_ADDRESS",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PHONE_FAX_NUMBER",
									"type": "String"
								},
								"sink": {
									"name": "PHONE_FAX_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_DPDB",
						"type": "DatasetReference",
						"parameters": {
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							},
							"DPDB": {
								"value": "@pipeline().globalParameters.DPDB",
								"type": "Expression"
							},
							"DPDB_HOST": {
								"value": "@pipeline().globalParameters.DPDB_HOST",
								"type": "Expression"
							},
							"DPDB_PORT": {
								"value": "@pipeline().globalParameters.DPDB_PORT",
								"type": "Expression"
							},
							"DPDB_USERNAME": {
								"value": "@pipeline().globalParameters.DPDB_USERNAME",
								"type": "Expression"
							},
							"DPDB_SECRET_NAME": {
								"value": "@pipeline().globalParameters.DPDB_SECRET_NAME",
								"type": "Expression"
							},
							"SCHEMA": "DPARTNER",
							"TABLE_NAME": "PARTY"
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_ASQLDB_SHIR",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA": "STAGE_LOAD",
							"TABLE_NAME": "TD_DPDB_ADVISER_NETWORK_STG",
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "cd-DPDB_ADVISER_NETWORK_STG_Upsert",
				"description": "compares transient table with staging table to identify new/updated records in the target/staging table.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "cd-TD_DPDB_ADVISER_NETWORK_STG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"additionalColumns": [
							{
								"name": "CREATE_USER_ID",
								"value": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								}
							}
						],
						"sqlReaderQuery": "select TDANS.NETWORK_PARTY_ROLE_ID,\n       TDANS.REL_FIRM_PARTY_ROLE_ID,\n       TDANS.ORGANISATION_NAME,\n       TDANS.FIRM_REFERENCE_NUMBER,\n       TDANS.STATUS,\n       TDANS.REGULATORY_STATUS_ID,\n       TDANS.PARTY_ROLE_TYPE_ID,\n       cast(TDANS.PERM_INVESTMENT_ADVICE as bit) as PERM_INVESTMENT_ADVICE,\n       cast(TDANS.PERM_MORTGAGE_ADVICE as bit) as PERM_MORTGAGE_ADVICE,\n       cast(TDANS.PERM_INSURANCE_ADVICE as bit) as PERM_INSURANCE_ADVICE,\n       cast(TDANS.PERM_PENSION_ADVICE as bit) as PERM_PENSION_ADVICE,\n       TDANS.ADDRESS_LINE_1,\n       TDANS.ADDRESS_LINE_2,\n       TDANS.ADDRESS_LINE_3,\n       TDANS.ADDRESS_LINE_4,\n       TDANS.POSTCODE,\n       TDANS.EMAIL_URL_ADDRESS,\n       TDANS.PHONE_FAX_NUMBER,\n       TDANS.RELATIONSHIP_TYPE_ID,\n       TDANS.RECORD_UPDATE_IND,\n       cast(0 as bit) as RECORD_DELETE_IND,\n       cast(sysdatetimeoffset() at time zone 'GMT Standard Time' as datetime) as UPDATE_DATE_TIME\n  from (select NETWORK_PARTY_ROLE_ID,\n               REL_FIRM_PARTY_ROLE_ID,\n               ORGANISATION_NAME,\n               FIRM_REFERENCE_NUMBER,\n               STATUS,\n               REGULATORY_STATUS_ID,\n               PARTY_ROLE_TYPE_ID,\n               PERM_INVESTMENT_ADVICE,\n               PERM_MORTGAGE_ADVICE,\n               PERM_INSURANCE_ADVICE,\n               PERM_PENSION_ADVICE,\n               ADDRESS_LINE_1,\n               ADDRESS_LINE_2,\n               ADDRESS_LINE_3,\n               ADDRESS_LINE_4,\n               POSTCODE,\n               EMAIL_URL_ADDRESS,\n               PHONE_FAX_NUMBER,\n               RELATIONSHIP_TYPE_ID,\n               convert(nvarchar(32), HashBytes('SHA2_256', concat(REL_FIRM_PARTY_ROLE_ID,\n                                                                  ORGANISATION_NAME,\n                                                                  STATUS,\n                                                                  FIRM_REFERENCE_NUMBER,\n                                                                  REGULATORY_STATUS_ID,\n                                                                  PARTY_ROLE_TYPE_ID,\n                                                                  PERM_INVESTMENT_ADVICE,\n                                                                  PERM_MORTGAGE_ADVICE,\n                                                                  PERM_INSURANCE_ADVICE,\n                                                                  PERM_PENSION_ADVICE,\n                                                                  ADDRESS_LINE_1,\n                                                                  ADDRESS_LINE_2,\n                                                                  ADDRESS_LINE_3,\n                                                                  ADDRESS_LINE_4,\n                                                                  POSTCODE,\n                                                                  EMAIL_URL_ADDRESS,\n                                                                  PHONE_FAX_NUMBER)),2) as RECORD_UPDATE_IND\n          from STAGE_LOAD.TD_DPDB_ADVISER_NETWORK_STG\n        ) TDANS\n  left outer join STAGE_CDI.DPDB_ADVISER_NETWORK_STG DANS\n    on (    DANS.RECORD_DELETE_IND = 0\n        and TDANS.NETWORK_PARTY_ROLE_ID = DANS.NETWORK_PARTY_ROLE_ID\n        and TDANS.REL_FIRM_PARTY_ROLE_ID = DANS.REL_FIRM_PARTY_ROLE_ID\n        and TDANS.RECORD_UPDATE_IND = DANS.RECORD_UPDATE_IND)\n where DANS.NETWORK_PARTY_ROLE_ID is null",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "upsert",
						"upsertSettings": {
							"useTempDB": true,
							"keys": [
								"NETWORK_PARTY_ROLE_ID",
								"REL_FIRM_PARTY_ROLE_ID"
							]
						},
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ORGANISATION_NAME",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ORGANISATION_NAME",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "FIRM_REFERENCE_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "FIRM_REFERENCE_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "STATUS",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "STATUS",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "RELATIONSHIP_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "RELATIONSHIP_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "REGULATORY_STATUS_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "REGULATORY_STATUS_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PARTY_ROLE_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "PARTY_ROLE_TYPE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PERM_INVESTMENT_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "PERM_INVESTMENT_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "PERM_MORTGAGE_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "PERM_MORTGAGE_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "PERM_INSURANCE_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "PERM_INSURANCE_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "PERM_PENSION_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "PERM_PENSION_ADVICE",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_1",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_1",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_2",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_2",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_3",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_3",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "ADDRESS_LINE_4",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "ADDRESS_LINE_4",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "POSTCODE",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "POSTCODE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "EMAIL_URL_ADDRESS",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "EMAIL_URL_ADDRESS",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "PHONE_FAX_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "PHONE_FAX_NUMBER",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "RECORD_UPDATE_IND",
									"type": "String",
									"physicalType": "nvarchar"
								},
								"sink": {
									"name": "RECORD_UPDATE_IND",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "RECORD_DELETE_IND",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "RECORD_DELETE_IND",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "CREATE_USER_ID",
									"type": "String"
								},
								"sink": {
									"name": "CREATE_USER_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "UPDATE_DATE_TIME",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "UPDATE_DATE_TIME",
									"type": "DateTime",
									"physicalType": "datetime2"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA": "STAGE_LOAD",
							"TABLE_NAME": "TD_DPDB_ADVISER_NETWORK_STG",
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA": "STAGE_CDI",
							"TABLE_NAME": "DPDB_ADVISER_NETWORK_STG",
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "cd-DPDB_ADVISER_NETWORK_STG_Del",
				"description": "compares transient table with staging table to identify deleted records in the target/staging table.",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "cd-DPDB_ADVISER_NETWORK_STG_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select DANS.NETWORK_PARTY_ROLE_ID,\n       DANS.REL_FIRM_PARTY_ROLE_ID,\n       cast(1 as bit) as RECORD_DELETE_IND,\n       cast(sysdatetimeoffset() at time zone 'GMT Standard Time' as datetime) as UPDATE_DATE_TIME \n  from STAGE_CDI.DPDB_ADVISER_NETWORK_STG DANS \n  left outer join STAGE_LOAD.TD_DPDB_ADVISER_NETWORK_STG TDANS \n    on (\tTDANS.NETWORK_PARTY_ROLE_ID = DANS.NETWORK_PARTY_ROLE_ID \n\t\tand TDANS.REL_FIRM_PARTY_ROLE_ID = DANS.REL_FIRM_PARTY_ROLE_ID) \n where DANS.RECORD_DELETE_IND = 0\n   and TDANS.NETWORK_PARTY_ROLE_ID is null",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "upsert",
						"upsertSettings": {
							"useTempDB": true,
							"keys": [
								"NETWORK_PARTY_ROLE_ID",
								"REL_FIRM_PARTY_ROLE_ID"
							]
						},
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "NETWORK_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								},
								"sink": {
									"name": "REL_FIRM_PARTY_ROLE_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "RECORD_DELETE_IND",
									"type": "Boolean",
									"physicalType": "bit"
								},
								"sink": {
									"name": "RECORD_DELETE_IND",
									"type": "Boolean",
									"physicalType": "bit"
								}
							},
							{
								"source": {
									"name": "UPDATE_DATE_TIME",
									"type": "DateTime",
									"physicalType": "datetime"
								},
								"sink": {
									"name": "UPDATE_DATE_TIME",
									"type": "DateTime",
									"physicalType": "datetime2"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ds_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA": "STAGE_LOAD",
							"TABLE_NAME": "TD_DPDB_ADVISER_NETWORK_STG",
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_ASQLDB",
						"type": "DatasetReference",
						"parameters": {
							"SCHEMA": "STAGE_CDI",
							"TABLE_NAME": "DPDB_ADVISER_NETWORK_STG",
							"ENVIRONMENT": {
								"value": "@pipeline().globalParameters.ENVIRONMENT",
								"type": "Expression"
							},
							"LOGICAL_ENVIRONMENT": {
								"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
								"type": "Expression"
							},
							"SHORT_LOCATION": {
								"value": "@pipeline().globalParameters.SHORT_LOCATION",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "sp-UPDATE_BATCH_AUDIT-TD_DPDB_ADVISER_NETWORK_STG",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "cd-TD_DPDB_ADVISER_NETWORK_STG",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[STAGE_CDI].[PRC_BATCH_AUDIT]",
					"storedProcedureParameters": {
						"p_billable_duration": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.billingReference.billableDuration[0].duration\n",
								"type": "Expression"
							},
							"type": "Decimal"
						},
						"p_billable_unit": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.billingReference.billableDuration[0].unit",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_duration": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.copyDuration",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_process_start_dt": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.executionDetails[0].start",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_records_read": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.rowsRead",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_records_written": {
							"value": {
								"value": "@activity('cd-TD_DPDB_ADVISER_NETWORK_STG').output.rowsCopied",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_table_name": {
							"value": "TD_DPDB_ADVISER_NETWORK_STG",
							"type": "String"
						},
						"p_trigger_name": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_AzureSQLDB",
					"type": "LinkedServiceReference",
					"parameters": {
						"SHORT_LOCATION": {
							"value": "@pipeline().globalParameters.SHORT_LOCATION",
							"type": "Expression"
						},
						"LOGICAL_ENVIRONMENT": {
							"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
							"type": "Expression"
						},
						"ENVIRONMENT": {
							"value": "@pipeline().globalParameters.ENVIRONMENT",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "sp-UPDATE_BATCH_AUDIT-DPDB_ADVISER_NETWORK_STG_Upsert",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "cd-DPDB_ADVISER_NETWORK_STG_Upsert",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[STAGE_CDI].[PRC_BATCH_AUDIT]",
					"storedProcedureParameters": {
						"p_billable_duration": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.billingReference.billableDuration[0].duration\n",
								"type": "Expression"
							},
							"type": "Decimal"
						},
						"p_billable_unit": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.billingReference.billableDuration[0].unit",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_duration": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.copyDuration",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_process_start_dt": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.executionDetails[0].start",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_records_read": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.rowsRead",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_records_written": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Upsert').output.rowsCopied",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_table_name": {
							"value": "DPDB_ADVISER_NETWORK_STG",
							"type": "String"
						},
						"p_trigger_name": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_AzureSQLDB",
					"type": "LinkedServiceReference",
					"parameters": {
						"SHORT_LOCATION": {
							"value": "@pipeline().globalParameters.SHORT_LOCATION",
							"type": "Expression"
						},
						"LOGICAL_ENVIRONMENT": {
							"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
							"type": "Expression"
						},
						"ENVIRONMENT": {
							"value": "@pipeline().globalParameters.ENVIRONMENT",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "sp-UPDATE_BATCH_AUDIT-DPDB_ADVISER_NETWORK_STG_Del",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "cd-DPDB_ADVISER_NETWORK_STG_Del",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[STAGE_CDI].[PRC_BATCH_AUDIT]",
					"storedProcedureParameters": {
						"p_billable_duration": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.billingReference.billableDuration[0].duration\n",
								"type": "Expression"
							},
							"type": "Decimal"
						},
						"p_billable_unit": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.billingReference.billableDuration[0].unit",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_duration": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.copyDuration",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_process_start_dt": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.executionDetails[0].start",
								"type": "Expression"
							},
							"type": "String"
						},
						"p_records_read": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.rowsRead",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_records_written": {
							"value": {
								"value": "@activity('cd-DPDB_ADVISER_NETWORK_STG_Del').output.rowsCopied",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"p_table_name": {
							"value": "DPDB_ADVISER_NETWORK_STG-Del",
							"type": "String"
						},
						"p_trigger_name": {
							"value": {
								"value": "@pipeline().TriggerName",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_AzureSQLDB",
					"type": "LinkedServiceReference",
					"parameters": {
						"SHORT_LOCATION": {
							"value": "@pipeline().globalParameters.SHORT_LOCATION",
							"type": "Expression"
						},
						"LOGICAL_ENVIRONMENT": {
							"value": "@pipeline().globalParameters.LOGICAL_ENVIRONMENT",
							"type": "Expression"
						},
						"ENVIRONMENT": {
							"value": "@pipeline().globalParameters.ENVIRONMENT",
							"type": "Expression"
						}
					}
				}
			}
		],
		"folder": {
			"name": "Digital Account/Adviser"
		},
		"annotations": [],
		"lastPublishTime": "2023-06-20T06:25:18Z"
	}
}